// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  passwordDigest String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  schools        School[]

  schoolId       Int?
}

model School {
  id         Int       @id @default(autoincrement())
  name       String
  brand      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  adminId    Int?
  admin      Admin?    @relation(fields: [adminId], references: [id])
  students   Student[]
  teachers   Teacher[]
  classes    Class[]
}

model Student {
  studentId        Int             @id @default(autoincrement())
  name             String
  passwordDigest   String
  parentContactInfo Json           // Parent/guardian details
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  studentIdGenerated String?       // Add this field for the generated ID

  // Relations
  schoolId         Int
  school           School          @relation(fields: [schoolId], references: [id])
  classId          Int
  class            Class           @relation(fields: [classId], references: [id])
  scores           Score[]
  notifications    Notification[]
  resultCheckers   ResultChecker[]
  resultCheckerLogs ResultCheckerLog[]
}

model Teacher {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  passwordDigest  String
  isClassTeacher  Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  schoolId        Int
  school          School    @relation(fields: [schoolId], references: [id])
  classes         Class[]
  scores          Score[]
  subjects        Subject[]
}

model Subject {
  id         Int       @id @default(autoincrement())
  name       String
  code       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  classId    Int
  classes    Class[]
  teachers   Teacher[]
}

model Class {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  schoolId   Int
  school     School    @relation(fields: [schoolId], references: [id])
  subjectId  Int
  subject    Subject   @relation(fields: [subjectId], references: [id])
  teacherId  Int
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  students   Student[]
  scores     Score[]
  resultCheckers    ResultChecker[]
  resultCheckerLogs ResultCheckerLog[]
}

model Score {
  id         Int       @id @default(autoincrement())
  caScore    Float
  examScore  Float
  finalScore Float
  remarks    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  studentId  Int
  student    Student   @relation(fields: [studentId], references: [studentId])
  classId    Int
  class      Class     @relation(fields: [classId], references: [id])
  teacherId  Int       // Added field to link back to the Teacher model
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
}

model Notification {
  id         Int       @id @default(autoincrement())
  message    String
  sentAt     DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type         String?   // 'RESULT_ALERT', 'CA_ALERT', 'CUSTOM'
  status       String    @default("PENDING") // 'PENDING', 'SENT', 'FAILED'
  metadata     Json?     // Additional notification data

  // Relations
  studentId  Int
  student    Student   @relation(fields: [studentId], references: [studentId])
}

model ResultChecker {
  id            Int       @id @default(autoincrement())
  studentId     Int
  classId       Int
  token         String    @unique
  trialCount    Int       @default(0)
  maxTrials     Int       @default(3)
  isActive      Boolean   @default(true)
  expiresAt     DateTime
  lastAccessedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  student       Student   @relation(fields: [studentId], references: [studentId])
  class         Class     @relation(fields: [classId], references: [id])

  @@unique([studentId, classId])
}

model ResultCheckerLog {
  id           Int       @id @default(autoincrement())
  studentId    Int
  classId      Int
  attemptType  String    // 'SUCCESS', 'FAILED'
  reason       String?
  ipAddress    String?
  attemptedAt  DateTime  @default(now())

  // Relations
  student      Student   @relation(fields: [studentId], references: [studentId])
  class        Class     @relation(fields: [classId], references: [id])
}
